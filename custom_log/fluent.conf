<source>
  type tail
  path /var/log/containers/**/*.log
  path_key path
  refresh_interval 10s
  read_from_head true
  pos_file /var/log/custom-logs.log.pos 
  format none
  tag docker_file.*
</source>

<filter docker_file.**>
  @type record_transformer
  renew_record false
  enable_ruby  true
  <record>
    #"testtag" ${tag_parts}
    #"source" ${record["message"]}
    "container_name" ${tag_arr=tag.split('.');con_name=tag_arr[4];} 
    #"file_name" ${tag_arr=tag.split('.');fname=tag_arr[5]+'.'+tag_arr[6];} 
    #"file_name" ${fname=tag_suffix[5];ffolder=fname[0..-5];suf=fname[-4,4];ffolder.gsub!('.','/'); fname='/'+ffolder+suf} 
    "file_name" ${full_path=record["path"].dup;tag_arr=tag.split('.');con_name=tag_arr[4];full_path.gsub!('/var/log/containers/', ''); full_path.gsub!(con_name, ''); full_path; } 
    "container_id" ${require 'json';require "open-uri";  tag_arr=tag.split('.');con_name=tag_arr[4];   html_response = nil;uuid="uuid_456";env_id = "456";namespace="namespace_456";container_name="containername_456";if $g_exid==nil; $g_exid=Hash.new; end;    if $g_exid[con_name]==nil; $g_exid[con_name]=Hash.new; end;               uri='http://169.254.169.250/latest/containers';urienv='http://169.254.169.250/latest/self/host';html_res_env=nil;info_env=nil;         if $g_exid[con_name]["cid"]==nil; open(uri,"Accept" => "application/json")  do |http| html_response = http.read end;container_array = JSON.parse(html_response);container_array.each do |info| if info['labels']['io.rancher.stack_service.name'] !=nil; cname = info['labels']['io.rancher.stack_service.name'].gsub!('/', '-'); end;if cname!=nil and cname==con_name;$g_exid[con_name]["cid"]=info['external_id']; break;end; end;   end; findid=$g_exid[con_name]["cid"]; if findid==nil; findid=con_name;end; findid}

    "is_in_label" ${require 'json';require "open-uri";  tag_arr=tag.split('.');con_name=tag_arr[4]; inlabel=false; uselabel=false;   fname=record["path"].dup;fname.gsub!('/var/log/containers/', ''); fname.gsub!(con_name, '');                                 html_response = nil;uuid="uuid_456";env_id = "456";namespace="namespace_456";container_name="containername_456";if $g_exid==nil; $g_exid=Hash.new; end;    if $g_exid[con_name]==nil; $g_exid[con_name]=Hash.new; end;               uri='http://169.254.169.250/latest/containers';urienv='http://169.254.169.250/latest/self/host';html_res_env=nil;info_env=nil;     if $g_exid[con_name][fname]==nil; $g_exid[con_name][fname]=Hash.new; end;          if $g_exid[con_name][fname]["inlabel"]==nil; open(uri,"Accept" => "application/json")  do |http| html_response = http.read end;container_array = JSON.parse(html_response);container_array.each  do |info|    uselabel=false;inlabel=false;           if info['labels']['io.rancher.stack_service.name'] !=nil; cname = info['labels']['io.rancher.stack_service.name'].gsub!('/', '-'); end;  if cname!=nil and cname==con_name; uselabel=true;              if info['labels']['hna.logging.file'] !=nil; alllogfile=info['labels']['hna.logging.file'].split(','); puts alllogfile; puts fname;      alllogfile.each do |lf| if fname[lf]; inlabel=true; break; end; end;       end;         end;           if uselabel==true;  $g_exid[con_name][fname]["inlabel"] = inlabel; break;end;      end;      puts $g_exid;   end;                     mylabel=$g_exid[con_name][fname]["inlabel"]; if mylabel==nil; mylabel=false;end;  mylabel}
    #"mytag" ${tag}
    #"mypretag" ${tag_prefix}
    #"mysuftag" ${tag_suffix}
    #"mymsg" ${record["message"]}
  </record>
</filter>


#<match docker_file.**>
#    @type grep
#    input_key is_in_label
#    exclude true
#    add_tag_prefix filtered
#</match>





<filter docker_file.**>
  @type record_transformer
  enable_ruby true
  <record>
    #"type" "mysql"
    "type" "custom_log"
    "data" ${require 'json';require "open-uri";html_response = nil;uuid="uuid_456";env_id = "456";namespace="namespace_456";container_name="containername_456";if $g_exid==nil; $g_exid=Hash.new; end; uri='http://169.254.169.250/latest/containers';urienv='http://169.254.169.250/latest/self/host';html_res_env=nil;info_env=nil;   if $g_exid["envid"]==nil; open(urienv,"Accept" => "application/json") do |http| html_res_env = http.read end;info_env=JSON.parse(html_res_env);$g_exid["envid"]=info_env['labels']['caas.hna.environment.id']; end; env_id=$g_exid["envid"];                               if $g_exid[record["container_id"]]==nil; $g_exid[record["container_id"]]=Hash.new; end;  if $g_exid[record["container_id"]]["uuid"]==nil; open(uri,"Accept" => "application/json")  do |http| html_response = http.read end;container_array = JSON.parse(html_response);uuid=record["container_id"];container_array.each do |info| if info['external_id']==uuid;$g_exid[record["container_id"]]["uuid"]=info['uuid'];$g_exid[record["container_id"]]["container_name"]=info['name'];$g_exid[record["container_id"]]["namespace"]=info['labels']['io.rancher.stack.name'];  break;end; end;    end;                             if env_id==nil; env_id="456"; end; namespace=$g_exid[record["container_id"]]["namespace"]; if namespace==nil;namespace="name456";end; uuid=$g_exid[record["container_id"]]["uuid"];if uuid==nil; uuid=record["container_id"];end;container_name=$g_exid[record["container_id"]]["container_name"];if container_name==nil;container_name="con456";end;             if record["is_in_label"]=="false"; uuid="todoremove_uuid"; env_id="todoremove_envid";end; log_info = Hash["log_time" => Time.now.strftime('%Y-%m-%dT%H:%M:%S.%L%:z'), "warn_type"=>"warn","message"=>record["message"]];json_data = Hash["container_uuid"=>uuid,"environment_id"=>env_id,"namespace"=>namespace,"container_name"=>container_name, "app_file"=>record["file_name"], "timestamp"=>Time.now.strftime('%Y-%m-%dT%H:%M:%S.%L%:z'), "log_info"=>log_info];json_data.to_json}
  </record>
</filter>



<filter docker_file.**>
  @type record_transformer
  renew_record true
  #keep_keys type,data,mytag,mymsg,container_id,container_name
  #@keep_keys type,data,mypretag,mysuftag
  keep_keys type,data
</filter>

<match docker_file.**>
    type burrow
    key_name data
   action inplace
   format json
   tag final.ok
</match>

<match final.ok>
 @type copy
<store>
   type stdout
</store>
<store>
  @type kafka
  brokers 10.0.128.132:9092,10.0.128.133:9092
  #default_topic log-file
  default_topic custom-log
</store>
</match>
<match filtered.**>
   type stdout
</match>
